apply plugin: "java"
sourceCompatibility = 1.7
targetCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceSets.main.java.srcDirs = ["src/"]
eclipse.project {
    name = appName + "-core"
}
dependencies {
    compile project(':trixt0r')
}


import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.tools.texturepacker.TexturePacker

//TODO clean up the pack tasks
//TODO load this data from config file
//TexturePacker settings
//*** XL 3840 x 2160
project.ext.settingsXL = new TexturePacker.Settings();
project.ext.settingsXL.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsXL.filterMag = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsXL.duplicatePadding = false;
project.ext.settingsXL.useIndexes = false;
project.ext.settingsXL.maxWidth = 4096
project.ext.settingsXL.maxHeight = 4096
project.ext.settingsXL.paddingX = 14
project.ext.settingsXL.paddingY = 14
//*** L 2560 x 1440
project.ext.settingsL = new TexturePacker.Settings();
project.ext.settingsL.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsL.filterMag = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsL.duplicatePadding = false;
project.ext.settingsL.useIndexes = false;
project.ext.settingsL.maxWidth = 4096
project.ext.settingsL.maxHeight = 4096
project.ext.settingsL.paddingX = 10
project.ext.settingsL.paddingY = 10
project.ext.settingsL.scale = [0.66666666666]
//*** M 1920 x 1080
project.ext.settingsM = new TexturePacker.Settings();
project.ext.settingsM.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsM.filterMag = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsM.duplicatePadding = false;
project.ext.settingsM.useIndexes = false;
project.ext.settingsM.maxWidth = 2048
project.ext.settingsM.maxHeight = 2048
project.ext.settingsM.paddingX = 7
project.ext.settingsM.paddingY = 7
project.ext.settingsM.scale = [0.5]
//*** S 1280 x 720
project.ext.settingsS = new TexturePacker.Settings();
project.ext.settingsS.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsS.filterMag = Texture.TextureFilter.MipMapLinearNearest;
project.ext.settingsS.duplicatePadding = false;
project.ext.settingsS.useIndexes = false;
project.ext.settingsS.maxWidth = 2048
project.ext.settingsS.maxHeight = 2048
project.ext.settingsS.paddingX = 5
project.ext.settingsS.paddingY = 5
project.ext.settingsS.scale = [0.333333333]

// MAP
task clearMapAtlas << {
    project.delete fileTree("../android/assets") { include  '**/map/*.pack*.atlas',
                                                            '**/map/*.pack*.png'}
}

task packMapAtlas << {
    clearMapAtlas.execute()

    String packName     = "map.pack";
    String source       = "core/assets_raw/map";
    String[] destinations = ["android/assets/xl/map",
                           "android/assets/l/map",
                           "android/assets/m/map",
                           "android/assets/s/map"];

    // generete texture packs
    TexturePacker.process(settingsXL, source, destinations[0], packName);
    TexturePacker.process(settingsL, source, destinations[1], packName);
    TexturePacker.process(settingsM, source, destinations[2], packName);
    TexturePacker.process(settingsS, source, destinations[3], packName);
}

task clearMapTmx << {
    project.delete fileTree("../android/assets") { include '**/map/*.tmx'}
}

task packMapTmx(type:Exec) {
    doFirst {
        clearMapTmx.execute()
    }
    String dir = 'assets_raw/map'
    workingDir dir
    def files = fileTree(dir) { include '*.tmx' }.files.name
    for(String file: files) {
        commandLine 'python', 'createAtlasReadyMapCopies.py', file
        doLast {
            project.copy {
                from dir
                into "../android/assets/xl/map"
                include "xl.tmx"
                rename "xl.tmx", file
            }
            project.delete dir+"/xl.tmx"
            project.copy {
                from dir
                into "../android/assets/l/map"
                include "l.tmx"
                rename "l.tmx", file
            }
            project.delete dir+"/l.tmx"
            project.copy {
                from dir
                into "../android/assets/m/map"
                include "m.tmx"
                rename "m.tmx", file
            }
            project.delete dir+"/m.tmx"
            project.copy {
                from dir
                into "../android/assets/s/map"
                include "s.tmx"
                rename "s.tmx", file
            }
            project.delete dir+"/s.tmx"
        }
    }
}

task packMap << {
    packMapAtlas.execute()
    packMapTmx.execute()
}

task clearMap << {
    clearMapAtlas.execute()
    clearMapTmx.execute()
}



// GAME UI
task clearGameUI << {
    project.delete fileTree("../android/assets") { include  '**/img/ui/*.pack*.atlas',
            '**/img/ui/*.pack*.png',
            '**/img/ui/*.json'}
}

task packGameUI << {
    clearGameUI.execute()

    // generete texture packs
    String packName     = "ui.pack";
    String source       = "core/assets_raw/img/ui";
    String[] destinations = ["android/assets/xl/img/ui",
                             "android/assets/l/img/ui",
                             "android/assets/m/img/ui",
                             "android/assets/s/img/ui"];

    TexturePacker.process(settingsXL, source, destinations[0], packName);
    TexturePacker.process(settingsL, source, destinations[1], packName);
    TexturePacker.process(settingsM, source, destinations[2], packName);
    TexturePacker.process(settingsS, source, destinations[3], packName);

    // pack skin json
    String skinSource       = "assets_raw/img/ui";
    String[] skinDestination = ["../android/assets/xl/img/ui",
                             "../android/assets/l/img/ui",
                             "../android/assets/m/img/ui",
                             "../android/assets/s/img/ui"];

    for(String dest : skinDestination) {
        println("packing skin json")
        project.copy {
            from skinSource
            into dest
            include "ui_skin.json"
        }
    }
}



// MOBILE CONTROLS
task clearMobileControls << {
    project.delete fileTree("../android/assets") { include  '**/img/mobile_controls/*.pack*.atlas',
            '**/img/mobile_controls/*.pack*.png',
            '**/img/mobile_controls/*.json'}
}

task packMobileControls << {
    clearMobileControls.execute()

    // generete texture packs
    String packName     = "mobile_controls.pack";
    String source       = "core/assets_raw/img/mobile_controls";
    String[] destinations = ["android/assets/xl/img/mobile_controls",
                             "android/assets/l/img/mobile_controls",
                             "android/assets/m/img/mobile_controls",
                             "android/assets/s/img/mobile_controls"];

    TexturePacker.process(settingsXL, source, destinations[0], packName);
    TexturePacker.process(settingsL, source, destinations[1], packName);
    TexturePacker.process(settingsM, source, destinations[2], packName);
    TexturePacker.process(settingsS, source, destinations[3], packName);

    // pack skin json
    String skinSource       = "assets_raw/img/mobile_controls";
    String[] skinDestination = ["../android/assets/xl/img/mobile_controls",
                                "../android/assets/l/img/mobile_controls",
                                "../android/assets/m/img/mobile_controls",
                                "../android/assets/s/img/mobile_controls"];

    for(String dest : skinDestination) {
        println("packing skin json")
        project.copy {
            from skinSource
            into dest
            include "mobile_controls_skin.json"
        }
    }
}






//TODO Old tasks, fix them

//TODO safe  max atalas size?
task packMenu << {
    if (project.ext.has('menuL') && project.ext.has('menuXL')) {
        logger.info "Calling TexturePacker: "+ platform
        TexturePacker.process(settings, menuL[0], menuL[1], menuL[2])
        TexturePacker.process(settings, menuXL[0], menuXL[1], menuXL[2])
    }
}

project.ext.menuM = ["core/assets_raw/img/menu/540", "android/assets/m/img/menu", "menu.pack"]
project.ext.menuSettingsM = new com.badlogic.gdx.tools.texturepacker.TexturePacker.Settings();
project.ext.menuSettingsM.maxWidth = 2048
project.ext.menuSettingsM.maxHeight = 2048
project.ext.menuSettingsM.paddingX = 10
project.ext.menuSettingsM.paddingY = 10
project.ext.menuSettingsM.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.menuSettingsM.filterMag = Texture.TextureFilter.MipMapLinearNearest;

task packMenuM << {
    if (project.ext.has('menuM')) {
        logger.info "Calling TexturePacker: "+ platform
        TexturePacker.process(menuSettingsM, menuM[0], menuM[1], menuM[2])
    }
}

project.ext.mobileControls = ["core/assets_raw/xl/img/mobile_controls", "android/assets/xl/img/mobile_controls", "mobile_controls.pack"]
project.ext.mobileControlsSettings = new com.badlogic.gdx.tools.texturepacker.TexturePacker.Settings();
project.ext.mobileControlsSettings.maxWidth = 2048
project.ext.mobileControlsSettings.maxHeight = 2048
project.ext.mobileControlsSettings.paddingX = 10
project.ext.mobileControlsSettings.paddingY = 10
project.ext.mobileControlsSettings.filterMin = Texture.TextureFilter.MipMapLinearNearest;
project.ext.mobileControlsSettings.filterMag = Texture.TextureFilter.MipMapLinearNearest;
